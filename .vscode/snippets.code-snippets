{
	"Command": {
		"prefix": "command",
		"scope": "swift",
		"body": [
			"import SwiftDiscord",
			"import D2Permissions",
			"",
			"class $1Command: Command {",
			"\tlet description = \"$2\"",
			"\tlet requiredPermissionLevel = PermissionLevel.$3",
			"\t",
			"\tfunc invoke(withArgs args: String, input: DiscordMessage?, output: CommandOutput, context: CommandContext) {",
			"\t\t$0",
			"\t}",
			"}"
		],
		"description": "Creates a new Command implementation"
	},
	"String command": {
		"prefix": "strcommand",
		"scope": "swift",
		"body": [
			"import SwiftDiscord",
			"import D2Permissions",
			"",
			"class $1Command: StringCommand {",
			"\tlet description = \"$2\"",
			"\tlet requiredPermissionLevel = PermissionLevel.$3",
			"\t",
			"\tfunc invoke(withStringInput input: String, output: CommandOutput, context: CommandContext) {",
			"\t\t$0",
			"\t}",
			"}"
		],
		"description": "Creates a new StringCommand implementation"
	},
	"Argument list command": {
		"prefix": "argcommand",
		"scope": "swift",
		"body": [
			"import SwiftDiscord",
			"import D2Permissions",
			"",
			"class $1Command: ArgListCommand {",
			"\tlet description = \"$2\"",
			"\tlet requiredPermissionLevel = PermissionLevel.$3",
			"\tlet expectedArgCount: Int = $4",
			"\t",
			"\tfunc invoke(withInputArgs inputArgs: [String], output: CommandOutput, context: CommandContext) {",
			"\t\t$0",
			"\t}",
			"}"
		],
		"description": "Creates a new ArgListCommand implementation"
	},
	"Send to message channel": {
		"prefix": "msend",
		"scope": "swift",
		"body": "message.channel?.send($0)"
	},
	"Game state implementation": {
		"prefix": "gamestate",
		"scope": "swift",
		"body": [
			"import SwiftDiscord",
			"import D2Permissions",
			"",
			"struct $1State: GameState, CustomStringConvertible {",
			"\ttypealias Role = $1Role",
			"\ttypealias Board = $1Board",
			"\ttypealias Move = $1Move",
			"\t",
			"\tprivate let ${2:firstPlayer}: DiscordUser",
			"\tprivate let ${3:secondPlayer}: DiscordUser",
			"\tprivate(set) var board = Board()",
			"\tprivate(set) var currentRole: Role = $4",
			"\tvar description: String { return \"$5\" }",
			"\t",
			"\tinit(firstPlayer: DiscordUser, secondPlayer: DiscordUser) {",
			"\t\tself.$2 = firstPlayer",
			"\t\tself.$3 = secondPlayer",
			"\t}",
			"\t",
			"\tmutating func perform(move: Move) throws {",
			"\t\t$6",
			"\t}",
			"\t",
			"\tfunc playerOf(role: Role) -> DiscordUser? {",
			"\t\t$7",
			"\t}",
			"\t",
			"\tfunc rolesOf(player: DiscordUser) -> [Role] {",
			"\t\t$8",
			"\t}",
			"}"
		]
	},
	"Game role implementation": {
		"prefix": "gamerole",
		"scope": "swift",
		"body": [
			"import D2Utils",
			"",
			"enum $1Role: CaseIterable, DiscordEncodable {",
			"\tcase $2",
			"\tcase $3",
			"\t",
			"\tvar discordStringEncoded: String {",
			"\t\tswitch self {",
			"\t\t\tcase .$2: return \"$4\"",
			"\t\t\tcase .$3: return \"$5\"",
			"\t\t}",
			"\t}",
			"\t",
			"\tvar opponent: $1Role {",
			"\t\tswitch self {",
			"\t\t\tcase .$2: return .$3",
			"\t\t\tcase .$3: return .$2",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"Game move implementation": {
		"prefix": "gamemove",
		"scope": "swift",
		"body": [
			"import D2Utils",
			"",
			"fileprivate let argsRegex = try! Regex(from: \"$2\")",
			"",
			"struct $1Move: GameMove {",
			"\t$3",
			"\t",
			"\tinit(fromString str: String) throws {",
			"\t\tif let parsedArgs = argsRegex.firstGroups(in: str) {",
			"\t\t\t$0",
			"\t\t} else {",
			"\t\t\tthrow GameError.invalidMove(\"Your move `\\(str)` is invalid.\")",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"Game board implementation": {
		"prefix": "gameboard",
		"scope": "swift",
		"body": [
			"struct $1Board: GameBoard {",
			"\ttypealias Role = $1Role",
			"\t",
			"\t$2",
			"\t",
			"\tvar discordStringEncoded: String { return $3 }",
			"\tvar winner: Role? { return $4 }",
			"\tvar isDraw: Bool { return $5 }",
			"\t",
			"\t$0",
			"}"
		]
	}
}
